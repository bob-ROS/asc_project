<?xml version="1.0"?>
<launch>
  <arg name="zed_namespace" default="zed"/>
  <arg name="svo_file" default=""/>
  <!-- <arg name="svo_file" default="path/to/svo/file.svo"> -->
  <arg name="zed_node_name" default="zed_node"/>
  <arg name="camera_model" default="zed"/>
  <!-- 'zed' or 'zedm' -->
  <arg name="publish_urdf" default="false"/>
  <arg name="visualize" default="true"/>
  <arg name="use_scan" default="true"/>


  <arg name="scan_topic" default="/scan"/>
  <arg name="scan_cloud_topic" default="/os1_cloud_node/points"/>
  <arg name="odom_topic" default="/icp/odom"/>

  <!-- use scan or scan_cloud-->
  <arg name="use_scan_cloud" default="false"/>
  <!-- use scan or scan_cloud-->
  <arg name="use_icp_odometry" default="true"/>
  <!-- to do-->
  <group ns="$(arg zed_namespace)">
    <!-- ZED Wrapper Node-->
    <include file="$(find zed_wrapper)/launch/zed_camera.launch">
      <arg name="svo_file" value="$(arg svo_file)"/>
      <arg name="node_name" value="$(arg zed_node_name)"/>
      <arg name="camera_model" value="$(arg camera_model)"/>
      <arg name="publish_urdf" value="$(arg publish_urdf)"/>
    </include>
  </group>
  <!-- run rtab-->
  <group ns="rtabmap">
    <!-- Use RGBD synchronization -->
    <!-- Here is a general example using a standalone nodelet, 
         but it is recommended to attach this nodelet to nodelet 
         manager of the camera to avoid topic serialization -->
    <node pkg="nodelet" type="nodelet" name="rgbd_sync" args="standalone rtabmap_ros/rgbd_sync" output="screen">
      <remap from="rgb/image" to="/$(arg zed_namespace)/$(arg zed_node_name)/rgb/image_rect_color"/>
      <remap from="depth/image" to="/$(arg zed_namespace)/$(arg zed_node_name)/depth/depth_registered"/>
      <remap from="rgb/camera_info" to="/$(arg zed_namespace)/$(arg zed_node_name)/rgb/camera_info"/>
      <remap from="rgbd_image" to="rgbd_image"/>
      <!-- output -->
      <!-- Should be true for not synchronized camera topics 
           (e.g., false for kinectv2, zed, realsense, true for xtion, kinect360)-->
      <param name="approx_sync" value="false"/>
    </node>


    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="--delete_db_on_start">
      <param name="frame_id" type="string" value="base_link"/>
      <param name="odom_frame_id" value="odom"/>
      <param name="subscribe_depth" type="bool" value="false"/>
      <param name="subscribe_rgb" type="bool" value="false"/>
      <param name="subscribe_rgbd" type="bool" value="true"/>
      <param name="subscribe_scan" type="bool" value="$(arg use_scan)"/>
      <param name="subscribe_scan_cloud" type="bool" value="$(arg use_scan_cloud)"/>
      <remap from="odom" to="/$(arg zed_namespace)/$(arg zed_node_name)/odom"/>
      <remap from="scan" to="$(arg scan_topic)"/>
      <remap from="scan_cloud" to="$(arg scan_cloud_topic)"/>
      <remap from="rgbd_image" to="rgbd_image"/>
      <param name="queue_size" type="int" value="10"/>
      <!-- RTAB-Map's parameters -->
      <param name="RGBD/NeighborLinkRefining" type="string" value="true"/>
      <param name="RGBD/ProximityBySpace" type="string" value="true"/>
      <param name="RGBD/AngularUpdate" type="string" value="0.01"/>
      <param name="RGBD/LinearUpdate" type="string" value="0.01"/>
      <param name="RGBD/OptimizeFromGraphEnd" type="string" value="false"/>
      <param name="Grid/FromDepth" type="string" value="false"/>
      <!-- occupancy grid from lidar -->
      <param name="Reg/Force3DoF" type="string" value="true"/>
      <param name="Reg/Strategy" type="string" value="1"/>
      <!-- 1=ICP -->
      <!-- ICP parameters -->
      <param name="Icp/VoxelSize" type="string" value="0.05"/>
      <param name="Icp/MaxCorrespondenceDistance" type="string" value="0.1"/>
    </node>

    <!-- ICP Odometry -->
    <node if="$(arg use_icp_odometry)" pkg="rtabmap_ros" type="icp_odometry" name="icp_odometry" output="screen" args="">
      <remap from="scan"                   to="$(arg scan_topic)"/>
      <remap from="scan_cloud"             to="$(arg scan_cloud_topic)"/>
      <remap from="odom"                   to="$(arg odom_topic)"/>
      
      <param name="frame_id"                    type="string" value="base_link"/>
      <param name="queue_size"                  type="int"    value="10"/>

<!--
      <param name="odom_frame_id"               type="string" value="$(arg vo_frame_id)"/>
      <param name="publish_tf"                  type="bool"   value="$(arg publish_tf_odom)"/>
      <param name="ground_truth_frame_id"       type="string" value="$(arg ground_truth_frame_id)"/>
      <param name="ground_truth_base_frame_id"  type="string" value="$(arg ground_truth_base_frame_id)"/>
      <param name="wait_for_transform_duration" type="double" value="$(arg wait_for_transform)"/>
      <param name="wait_imu_to_init"            type="bool"   value="$(arg wait_imu_to_init)"/>
      <param name="config_path"                 type="string" value="$(arg cfg)"/>

      <param name="guess_frame_id"              type="string" value="$(arg odom_guess_frame_id)"/>
      <param name="guess_min_translation"       type="double" value="$(arg odom_guess_min_translation)"/>
      <param name="guess_min_rotation"          type="double" value="$(arg odom_guess_min_rotation)"/>
-->
    </node>


    <node name="rviz" pkg="rviz" type="rviz" args="-d $(find asc_rtabmap_navigation)/config/rtabmap.rviz" output="screen" if="$(arg visualize)"/>


    <!-- Construct and voxelize the point cloud (for fast visualization in rviz) -->
    <node pkg="nodelet" type="nodelet" name="points_xyzrgb" args="standalone rtabmap_ros/point_cloud_xyzrgb">
      <remap from="rgbd_image" to="/rtabmap/rgbd_image/compressed"/>
      <remap from="cloud" to="/rtabmap/cloud_map"/>
      <param name="queue_size" type="int" value="10"/>
      <param name="voxel_size" type="double" value="0.01"/>
    </node>


    <!-- Visualisation RTAB-Map -->
    <node pkg="rtabmap_ros" type="rtabmapviz" args="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" name="rtabmapviz" output="screen" if="$(arg visualize)">
      <param name="subscribe_depth" type="bool" value="true"/>
      <param name="subscribe_scan" type="bool" value="$(arg use_scan)"/>
      <param name="subscribe_scan_cloud" type="bool" value="$(arg use_scan_cloud)"/>
      <param name="frame_id" type="string" value="base_link"/>
      <param name="wait_for_transform" type="bool" value="true"/>
      <remap from="rgb/image" to="/$(arg zed_namespace)/$(arg zed_node_name)/rgb/image_rect_color"/>
      <remap from="depth/image" to="/$(arg zed_namespace)/$(arg zed_node_name)/depth/depth_registered"/>
      <remap from="rgb/camera_info" to="/$(arg zed_namespace)/$(arg zed_node_name)/rgb/camera_info"/>
      <remap from="scan" to="/scan"/>
      <remap from="odom" to="$(arg odom_topic)"/>
    </node>


  </group>
  <!-- Launch move_base + pointcloud_to_scan -->
  <!-- start EKF-->
  <!--
   <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
    <rosparam command="load" file="$(find asc_control)/config/localization_sim.yaml"/>
    <remap from="odometry/filtered" to="odometry/filtered"/>
  </node> -->
  <!-- start move_base-->
  <!--
  <include file="$(find asc_navigation)/launch/move_base.launch"/>
 -->
</launch>

