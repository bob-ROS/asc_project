<?xml version="1.0"?>
<launch>


  <arg name="use_viz" default="false"/>
  <arg name="use_move_base" default="false"/> <!-- Should move base be started?-->
  <arg name="starting_lidar" default="true"/> 

  <!-- Zed param  -->
  <arg name="svo_file" default=""/>
  <arg name="zed_node_name" default="zed_node"/>
  <arg name="camera_model" default="zed"/>
  <arg name="publish_urdf" default="false"/>


  <!-- cmd MUX  -->
  <include file="$(find asc_twist_mux)/launch/twist_mux.launch">
  <arg name="cmd_vel_out" value="/cmd_vel"/>
  </include>


    <!-- ZED Wrapper Node-->
    <include file="$(find zed_wrapper)/launch/zed_camera.launch">
      <arg name="svo_file" value="$(arg svo_file)"/>
      <arg name="node_name" value="$(arg zed_node_name)"/>
      <arg name="camera_model" value="$(arg camera_model)"/>
      <arg name="publish_urdf" value="$(arg publish_urdf)"/>
    </include>


  <!-- LiDaR start  -->
  <include file="$(find ouster_ros)/os1.launch" if="$(arg starting_lidar)">
    <arg name="os1_hostname" value="os1"/>
    <arg name="os1_udp_dest" value="tx2"/>
    <arg name="lidar_mode" value="1024x20"/>
    <arg name="viz" value="false"/>
  </include>

  <!-- scan converting from lidar, required for obstacle layer -->
  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan" output="screen">
    <remap from="scan" to="/scan"/> 
    <remap from="cloud_in" to="os1_cloud_node/points"/>
    <rosparam>
              target_frame: base_link # Leave empty to output scan in the pointcloud frame
              tolerance: 1.0
              min_height: 0.2
              max_height: 1.0

              angle_min: -3.14 # -30.0*M_PI/180.0
              angle_max: 3.14 # 30.0*M_PI/180.0
              angle_increment: 0.005 # M_PI/360.0
              scan_time: 0.3333
              range_min: 0.8
              range_max: 100.0
              use_inf: true

              # Concurrency level, affects number of pointclouds queued for processing and number of threads used
              # 0 : Detect number of cores
              # 1 : Single threaded
              # 2-&gt;inf : Parallelism level
              concurrency_level: 2
    </rosparam>
  </node>

	<!-- TF publisher-->
	<param name="/robot_description" command="$(find xacro)/xacro --inorder '$(find asc_description)/urdf/mast.urdf.xacro'"/>
	<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
		<remap from="/joint_states" to="/joint_states"/>
	</node>

  <!-- lidar position os1_sensor-->
  <node pkg="tf2_ros" type="static_transform_publisher" name="link_to_lidar" args="0 0 0.2 -1.57 0 0 base_link os1_sensor" output="screen"/>


  <!-- GPS position os1_sensor-->
  <node pkg="tf2_ros" type="static_transform_publisher" name="link_to_gps" args="0 0 0.2 -1.57 0 0 base_link gps" output="screen"/>

  <!--  GPS  -->
  <arg name="port" default="/dev/ttyUSB0" />
  <arg name="baud" default="4800" />
  <arg name="frame_id" default="gps" />
  <arg name="use_GNSS_time" default="False" />
  <arg name="time_ref_source" default="gps" />
  <arg name="useRMC" default="False" />

  <node name="nmea_serial_driver_node" pkg="nmea_navsat_driver" type="nmea_serial_driver" output="screen">
    <param name="port" value="$(arg port)"/>
    <param name="baud" value="$(arg baud)" />
    <param name="frame_id" value="$(arg frame_id)" />
    <param name="use_GNSS_time" value="$(arg use_GNSS_time)" />
    <param name="time_ref_source" value="$(arg time_ref_source)" />
    <param name="useRMC" value="$(arg useRMC)" />
  </node>




  <!-- Run Cartographer Node -->
  <node name="cartographer_node" pkg="cartographer_ros" type="cartographer_node" args="           -configuration_directory               $(find asc_cartographer_navigation)/config           -configuration_basename asc_real.lua" output="screen">
    <remap from="imu" to="/os1_cloud_node/imu" />
    <remap from="odom" to="/zed_node/odom"/>
    <remap from="points2" to="/os1_cloud_node/points"/>
  </node>

  <node name="cartographer_occupancy_grid_node" pkg="cartographer_ros"
      type="cartographer_occupancy_grid_node" args="-resolution 0.05" />

  <!-- Run RViz Node -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find asc_cartographer_navigation)/cartographer.rviz" output="screen" if="$(arg use_viz)"/>




  <!--- Run Move Base -->
  <include file="$(find asc_navigation)/launch/move_base.launch" if="$(arg use_move_base)"/>
</launch>


